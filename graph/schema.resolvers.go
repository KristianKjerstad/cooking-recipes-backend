package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"cooking-recipes-backend/database"
	"cooking-recipes-backend/graph/model"
	"fmt"
)

var db = database.Connect()

//	func (r *mutationResolver) CreateDog(ctx context.Context, input *model.New) (*model.Dog, error) {
//		return db.SaveRecipe(input), nil
//	}
//
//	func (r *queryResolver) Dog(ctx context.Context, id string) (*model.Dog, error) {
//		return db.FindByID(id), nil
//	}
// func (r *queryResolver) Dogs(ctx context.Context) ([]*model.Dog, error) {
// 	return db.All(), nil
// }

// CreateRecipe is the resolver for the createRecipe field.
func (r *mutationResolver) CreateRecipe(ctx context.Context, input *model.NewRecipeInput) (*model.Recipe, error) {
	return db.SaveRecipe(input), nil
}

// UpdateRecipe is the resolver for the updateRecipe field.
func (r *mutationResolver) UpdateRecipe(ctx context.Context, input *model.UpdateRecipeInput) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: UpdateRecipe - updateRecipe"))
}

// DeleteRecipe is the resolver for the deleteRecipe field.
func (r *mutationResolver) DeleteRecipe(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRecipe - deleteRecipe"))
}

// AddIngredient is the resolver for the addIngredient field.
func (r *mutationResolver) AddIngredient(ctx context.Context, recipeID string, ingredient *model.NewIngredientInput) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: AddIngredient - addIngredient"))
}

// UpdateIngredient is the resolver for the updateIngredient field.
func (r *mutationResolver) UpdateIngredient(ctx context.Context, recipeID string, ingredient *model.UpdateIngredientInput) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: UpdateIngredient - updateIngredient"))
}

// DeleteIngredient is the resolver for the deleteIngredient field.
func (r *mutationResolver) DeleteIngredient(ctx context.Context, recipeID string, ingredientID string) (*model.Recipe, error) {
	panic(fmt.Errorf("not implemented: DeleteIngredient - deleteIngredient"))
}

// Recipe is the resolver for the recipe field.
func (r *queryResolver) Recipe(ctx context.Context, id *string, name *string) (*model.Recipe, error) {
	return db.FindRecipeByID(*id), nil
	panic(fmt.Errorf("not implemented: Recipe - recipe"))
}

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.Recipe, error) {
	return db.AllRecipes(), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
